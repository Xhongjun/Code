package com.xgdfin.rpc.annotation;import org.springframework.beans.BeansException;import org.springframework.beans.factory.InitializingBean;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.stereotype.Component;import org.springframework.util.StringUtils;import java.net.ServerSocket;import java.net.Socket;import java.util.HashMap;import java.util.Map;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;/** Copyright (C) 2017  ShenZhen xinLianZhengXin Co.,Ltd All Rights Reserved.* 未经本公司正式书面同意，其他任何个人、团体不得使用、复制、修改或发布本软件.* 版权所有深圳市信联征信有限公司 http://www.credlink.com/*/@Componentpublic class RpcAnnServerProxy implements ApplicationContextAware, InitializingBean {    ExecutorService cachedThreadPool = Executors.newCachedThreadPool();    private HashMap<String, Object> handleServiceMap = new HashMap<>();    private int port;    public RpcAnnServerProxy(int port) {        this.port = port;    }    /** bean 初始化的时候执行*/    @Override    public void afterPropertiesSet() throws Exception {        ServerSocket serverSocket = null;        Socket socket = null;        try {            // 服务端 socket            serverSocket = new ServerSocket(port);            while (true) {                // 创建连接                socket = serverSocket.accept(); // BIO                cachedThreadPool.execute(new ServerHandleRunable(socket, handleServiceMap));            }        } catch (Exception e) {            e.printStackTrace();        } finally {            if (serverSocket!=null) {            }        }    }    /** 获取 spring 的上下文，从中找到写了 rpc 注解的实现类*/    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {        // 写有 rpc 注释的服务实现类        Map<String, Object> serviceBeanMap = applicationContext.getBeansWithAnnotation(RpcServiceAnn.class);        if (serviceBeanMap!=null) {            for (Object bean : serviceBeanMap.values()) {                // 获取到类上注解                RpcServiceAnn rpcServiceAnn = bean.getClass().getAnnotation(RpcServiceAnn.class);                // 注解的值                Class<?> service = rpcServiceAnn.value();                String version = rpcServiceAnn.version();                // 将写有 rpc 注释的服务实现类放入容器                String serviceName = service.getName();                if (!StringUtils.isEmpty(version)) {                    serviceName = serviceName + "-" + version;                }                handleServiceMap.put(serviceName, bean);            }        }    }}