package com.xgdfin.rpc.channel;import com.xgdfin.rpc.RpcRequest;import io.netty.channel.ChannelHandlerContext;import io.netty.channel.ChannelInboundHandlerAdapter;import org.springframework.util.StringUtils;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.HashMap;/** Copyright (C) 2017  ShenZhen xinLianZhengXin Co.,Ltd All Rights Reserved.* 未经本公司正式书面同意，其他任何个人、团体不得使用、复制、修改或发布本软件.* 版权所有深圳市信联征信有限公司 http://www.credlink.com/*/public class RpcRegistryHandler extends ChannelInboundHandlerAdapter {    // 发布服务的实现类的容器    private HashMap<String, Object> serverRegistryBean;    public RpcRegistryHandler(HashMap<String, Object> serverRegistryBean) {        this.serverRegistryBean = serverRegistryBean;    }    // 从客户端请求通道中读取数据    @Override    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {        if (msg.getClass() != RpcRequest.class) {            new RuntimeException("请求类型不合法");        }        // 服务调用        Object serverResult = serverInvoke(msg);        System.out.println("================================");        // 服务调用返回        ctx.write(serverResult);        ctx.flush();        ctx.close();    }    // 异常捕获，及后续处理    @Override    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {        cause.printStackTrace();        ctx.close();    }    // 服务调用    private Object serverInvoke(Object msg)            throws NoSuchMethodException, InvocationTargetException,            IllegalAccessException, ClassNotFoundException {        // 服务结果        Object serverResult = null;        // 客户端请求参数        RpcRequest request = (RpcRequest) msg;        String serverName = request.getClassName(); // 服务全类名        String methodName = request.getMethodName(); // 方法名        Object[] paramesType = request.getParamesType(); // 参数类型        String version = request.getVersion(); // 服务版本号        System.out.println("请求服务："+serverName+" 方法名："+methodName+" 版本号："+version);        if (!StringUtils.isEmpty(version)) {            serverName = serverName + "-" + version;        }        Object serverImpl = serverRegistryBean.get(serverName);        if (serverImpl==null) {            serverResult = "【 server is no found: "+ request.getClassName() + ", version：" + version + " 】";            System.out.println(serverResult);            return serverResult;        }        /** 存在服务*/        // 反射获得服务实现类        Class<?> serverImplClass = Class.forName(request.getClassName());        // 获得调用方法        Class<?>[] typeClass = null;        if (paramesType!=null) {            typeClass = new Class[paramesType.length];            for (int i=0; i<paramesType.length; i++) {                typeClass[i] = paramesType[i].getClass();            }        }        //Method method = serverImpl.getClass().getMethod(methodName, typeClass);        Method method = serverImplClass.getMethod(methodName, typeClass);        // 调用方法        serverResult = method.invoke(serverImpl, paramesType);        return serverResult;    }}